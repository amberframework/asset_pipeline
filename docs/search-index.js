crystal_doc_search_index_callback({"repository_name":"asset_pipeline","body":"# Asset Pipeline\n\nAsset Pipeline is a shard written to handle 3 types of assets:\n- Javascript, by using ESM modules and import maps  (Done! v0.34)\n- CSS/SASS, by utilizing Node SASS from an import map (TBD)\n- Images (TBD)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     asset_pipeline:\n       github: amberframework/asset_pipeline\n       version: 0.34.0\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nView the full documentation for the [current version here](https://amberframework.github.io/asset_pipeline/AssetPipeline/FrontLoader.html)\n\nFor the fullest examples, please view the docs for `AssetPipeline::FrontLoader`.\n\nThe `FrontLoader` class is the primary class to use for handling all of your assets with the AssetPipeline, including the `ImportMaps`.\n\n## Development\n\nThank you for your interest in contributing! Please join the Amber (discord)[https://discord.gg/JKCczAEh4D] to get the most up to date information.\n\nIf you're interested in contributing, please check out the open github issues and then ask about them in the discord group to see if anyone has made any attempts or has additional information about the issue.\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/asset_pipeline/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Seth Tucker](https://github.com/crimson-knight) - creator and maintainer\n","program":{"html_id":"asset_pipeline/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"asset_pipeline","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"asset_pipeline/AssetPipeline","path":"AssetPipeline.html","kind":"module","full_name":"AssetPipeline","name":"AssetPipeline","abstract":false,"locations":[{"filename":"src/asset_pipeline.cr","line_number":6,"url":null},{"filename":"src/import_map/import_map.cr","line_number":1,"url":null}],"repository_name":"asset_pipeline","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.34.0\""}],"doc":"TODO: Write documentation for `AssetPipeline`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"AssetPipeline.html\">AssetPipeline</a></code></p>","types":[{"html_id":"asset_pipeline/AssetPipeline/FrontLoader","path":"AssetPipeline/FrontLoader.html","kind":"class","full_name":"AssetPipeline::FrontLoader","name":"FrontLoader","abstract":false,"superclass":{"html_id":"asset_pipeline/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"asset_pipeline/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"asset_pipeline/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/asset_pipeline.cr","line_number":52,"url":null}],"repository_name":"asset_pipeline","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"asset_pipeline/AssetPipeline","kind":"module","full_name":"AssetPipeline","name":"AssetPipeline"},"doc":"The asset pipeline is responsible for loading assets from the import maps, asset loader and compiling styling.\n\nUse the `FrontLoader` class to initialize and manage your asset pipeline as a whole.\n\n# How to use Import Maps\n\nUsing import maps is simple. A default \"application\" import map is created when a `AssetPipeline::FrontLoader` is initialized:\n\n```\nfront_loader = AssetPipeline::FrontLoader.new\nimport_map = front_loader.get_import_map\nimport_map.add_import(\"someClass\", \"your_file.js\")\nfront_loader.render_import_map_tag # Generates the import map tag and any module preload directives\n```\n\nYou can also specify the name of your import map by initializing the with an import map\n\n```\nfront_loader = AssetPipeline::FrontLoader.new(import_map: AssetPipeline::ImportMap.new(name: \"my_import_map\"))\nimport_map = front_loader.get_import_map(\"my_import_map\") # You must specify the import map by the name you created\nimport_map.add_import(\"someClass\", \"your_file.js\")\nfront_loader.render_import_map_tag(\"my_import_map\") # You must specify the name of the import map by the name you created\n```\n\nIf you need to create multiple import maps, the initializer can take a block:\n```\nfront_loader = AssetPipeline::FrontLoader.new do |import_maps|\n  import_map1 = AssetPipeline::ImportMap.new\n  import_map1.add_import(\"stimulus\", \"https://cdn.jsdelivr.net/npm/stimulus@3.2.2/+esm\", preload: true)\n\n  import_map2 = AssetPipeline::ImportMap.new(\"admin_area\")\n  import_map2.add_import(\"alpine\", \"https://cdn.jsdelivr.net/npm/alpinejs@3.13.2/+esm\")\n\n  import_maps << import_map1\n  import_maps << import_map2\nend\n\nfront_loader.render_import_map_tag               # Renders the import_map1 using the default \"application\" name\nfront_loader.render_import_map_tag(\"admin_area\") # Renders the import_map2. Tip: only 1 import map should be on a page\n```\n\nRead more about the `ImportMap` class to know all of your options, including the 'preload' and 'scope' feature.\n","summary":"<p>The asset pipeline is responsible for loading assets from the import maps, asset loader and compiling styling.</p>","constructors":[{"html_id":"new(js_source_path:Path=Path.new(\"src/app/javascript\"),js_output_path:Path=Path.new(\"public/assets/\"),import_maps:Array(ImportMap)=[]ofImportMap)-class-method","name":"new","doc":"The default initializer for the `FrontLoader` class.","summary":"<p>The default initializer for the <code><a href=\"../AssetPipeline/FrontLoader.html\">FrontLoader</a></code> class.</p>","abstract":false,"args":[{"name":"js_source_path","default_value":"Path.new(\"src/app/javascript\")","external_name":"js_source_path","restriction":"Path"},{"name":"js_output_path","default_value":"Path.new(\"public/assets/\")","external_name":"js_output_path","restriction":"Path"},{"name":"import_maps","default_value":"[] of ImportMap","external_name":"import_maps","restriction":"Array(ImportMap)"}],"args_string":"(js_source_path : Path = Path.new(\"src/app/javascript\"), js_output_path : Path = Path.new(\"public/assets/\"), import_maps : Array(ImportMap) = [] of ImportMap)","args_html":"(js_source_path : Path = <span class=\"t\">Path</span>.new(<span class=\"s\">&quot;src/app/javascript&quot;</span>), js_output_path : Path = <span class=\"t\">Path</span>.new(<span class=\"s\">&quot;public/assets/&quot;</span>), import_maps : Array(<a href=\"../AssetPipeline/ImportMap.html\">ImportMap</a>) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">ImportMap</span>)","location":{"filename":"src/asset_pipeline.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"js_source_path","default_value":"Path.new(\"src/app/javascript\")","external_name":"js_source_path","restriction":"Path"},{"name":"js_output_path","default_value":"Path.new(\"public/assets/\")","external_name":"js_output_path","restriction":"Path"},{"name":"import_maps","default_value":"[] of ImportMap","external_name":"import_maps","restriction":"Array(ImportMap)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(js_source_path, js_output_path, import_maps)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(js_source_path:Path=Path.new(\"src/app/javascript\"),js_output_path:Path=Path.new(\"public/assets/\"),import_map:ImportMap=ImportMap.new)-class-method","name":"new","abstract":false,"args":[{"name":"js_source_path","default_value":"Path.new(\"src/app/javascript\")","external_name":"js_source_path","restriction":"Path"},{"name":"js_output_path","default_value":"Path.new(\"public/assets/\")","external_name":"js_output_path","restriction":"Path"},{"name":"import_map","default_value":"ImportMap.new","external_name":"import_map","restriction":"ImportMap"}],"args_string":"(js_source_path : Path = Path.new(\"src/app/javascript\"), js_output_path : Path = Path.new(\"public/assets/\"), import_map : ImportMap = ImportMap.new)","args_html":"(js_source_path : Path = <span class=\"t\">Path</span>.new(<span class=\"s\">&quot;src/app/javascript&quot;</span>), js_output_path : Path = <span class=\"t\">Path</span>.new(<span class=\"s\">&quot;public/assets/&quot;</span>), import_map : <a href=\"../AssetPipeline/ImportMap.html\">ImportMap</a> = <span class=\"t\">ImportMap</span>.new)","location":{"filename":"src/asset_pipeline.cr","line_number":64,"url":null},"def":{"name":"new","args":[{"name":"js_source_path","default_value":"Path.new(\"src/app/javascript\")","external_name":"js_source_path","restriction":"Path"},{"name":"js_output_path","default_value":"Path.new(\"public/assets/\")","external_name":"js_output_path","restriction":"Path"},{"name":"import_map","default_value":"ImportMap.new","external_name":"import_map","restriction":"ImportMap"}],"visibility":"Public","body":"_ = allocate\n_.initialize(js_source_path, js_output_path, import_map)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(js_source_path:Path=Path.new(\"src/app/javascript/\"),js_output_path:Path=Path.new(\"public/assets\"),&)-class-method","name":"new","doc":"Initialize the asset pipeline with the given *block*.\n\nThe block is the import maps that will be used by the asset pipeline.","summary":"<p>Initialize the asset pipeline with the given <em>block</em>.</p>","abstract":false,"args":[{"name":"js_source_path","default_value":"Path.new(\"src/app/javascript/\")","external_name":"js_source_path","restriction":"Path"},{"name":"js_output_path","default_value":"Path.new(\"public/assets\")","external_name":"js_output_path","restriction":"Path"}],"args_string":"(js_source_path : Path = Path.new(\"src/app/javascript/\"), js_output_path : Path = Path.new(\"public/assets\"), &)","args_html":"(js_source_path : Path = <span class=\"t\">Path</span>.new(<span class=\"s\">&quot;src/app/javascript/&quot;</span>), js_output_path : Path = <span class=\"t\">Path</span>.new(<span class=\"s\">&quot;public/assets&quot;</span>), &)","location":{"filename":"src/asset_pipeline.cr","line_number":73,"url":null},"def":{"name":"new","args":[{"name":"js_source_path","default_value":"Path.new(\"src/app/javascript/\")","external_name":"js_source_path","restriction":"Path"},{"name":"js_output_path","default_value":"Path.new(\"public/assets\")","external_name":"js_output_path","restriction":"Path"}],"yields":1,"block_arity":1,"visibility":"Public","body":"_ = allocate\n_.initialize(js_source_path, js_output_path) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"generate_file_version_hash(import_map_name:String=\"application\")-instance-method","name":"generate_file_version_hash","doc":"Generates the file hash and appends it to the file name.\n:nodoc:","summary":"<p>Generates the file hash and appends it to the file name.</p>","abstract":false,"args":[{"name":"import_map_name","default_value":"\"application\"","external_name":"import_map_name","restriction":"String"}],"args_string":"(import_map_name : String = \"application\")","args_html":"(import_map_name : String = <span class=\"s\">&quot;application&quot;</span>)","location":{"filename":"src/asset_pipeline.cr","line_number":115,"url":null},"def":{"name":"generate_file_version_hash","args":[{"name":"import_map_name","default_value":"\"application\"","external_name":"import_map_name","restriction":"String"}],"visibility":"Public","body":"file_hashes = Hash(String, String).new\ntarget_import_map = get_import_map(import_map_name)\n(Dir.glob(\"#{@js_source_path}/**/*.js\")).each do |file|\n  file_hash = (Digest::SHA256.new.file(file)).hexfinal\n  file_index = (file.index('.')) || (next)\n  cached_file_name = (file.insert(file_index, \"-\" + file_hash)).gsub(@js_source_path.to_s, @js_output_path.to_s)\n  found_index = target_import_map.imports.index do |r|\n    (File.basename(r.first_value.to_s, \".js\")).includes?(File.basename(file, \".js\"))\n  end\n  if !found_index.nil?\n    if !(File.exists?(cached_file_name))\n      Dir.mkdir_p(File.dirname(cached_file_name))\n      FileUtils.cp_r(file, cached_file_name)\n    end\n    first_key = target_import_map.imports[found_index].first_key\n    target_import_map.imports[found_index][first_key] = cached_file_name.gsub(@js_output_path.to_s, (target_import_map.public_asset_base_path.join(Path[\"\"])).to_s)\n  end\nend\n"}},{"html_id":"get_import_map(name:String=\"application\"):AssetPipeline::ImportMap-instance-method","name":"get_import_map","doc":"Gets the import map with the given *name*.\n\nDefault name is \"application\".","summary":"<p>Gets the import map with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","default_value":"\"application\"","external_name":"name","restriction":"String"}],"args_string":"(name : String = \"application\") : AssetPipeline::ImportMap","args_html":"(name : String = <span class=\"s\">&quot;application&quot;</span>) : <a href=\"../AssetPipeline/ImportMap.html\">AssetPipeline::ImportMap</a>","location":{"filename":"src/asset_pipeline.cr","line_number":82,"url":null},"def":{"name":"get_import_map","args":[{"name":"name","default_value":"\"application\"","external_name":"name","restriction":"String"}],"return_type":"AssetPipeline::ImportMap","visibility":"Public","body":"@import_maps.find do |import_map|\n  import_map.name == name\nend || (raise(\"Import map with name #{name} not found\"))"}},{"html_id":"import_maps:Array(ImportMap)-instance-method","name":"import_maps","abstract":false,"location":{"filename":"src/asset_pipeline.cr","line_number":53,"url":null},"def":{"name":"import_maps","return_type":"Array(ImportMap)","visibility":"Public","body":"@import_maps"}},{"html_id":"import_maps=(import_maps:Array(ImportMap))-instance-method","name":"import_maps=","abstract":false,"args":[{"name":"import_maps","external_name":"import_maps","restriction":"Array(ImportMap)"}],"args_string":"(import_maps : Array(ImportMap))","args_html":"(import_maps : Array(<a href=\"../AssetPipeline/ImportMap.html\">ImportMap</a>))","location":{"filename":"src/asset_pipeline.cr","line_number":53,"url":null},"def":{"name":"import_maps=","args":[{"name":"import_maps","external_name":"import_maps","restriction":"Array(ImportMap)"}],"visibility":"Public","body":"@import_maps = import_maps"}},{"html_id":"render_import_map_as_file(name:String=\"application\"):String-instance-method","name":"render_import_map_as_file","doc":"Returns the url to the import_map.json file that has been generated\n\nWarning: currently there is minimal browser support for this part of the spec. Please test thoroughly before using this approach.","summary":"<p>Returns the url to the import_map.json file that has been generated</p>","abstract":false,"args":[{"name":"name","default_value":"\"application\"","external_name":"name","restriction":"String"}],"args_string":"(name : String = \"application\") : String","args_html":"(name : String = <span class=\"s\">&quot;application&quot;</span>) : String","location":{"filename":"src/asset_pipeline.cr","line_number":95,"url":null},"def":{"name":"render_import_map_as_file","args":[{"name":"name","default_value":"\"application\"","external_name":"name","restriction":"String"}],"return_type":"String","visibility":"Public","body":"generate_file_version_hash(name)\nimport_map = get_import_map(name)\nfile_contents = import_map.build_import_map_json\ndigest = Digest::SHA256.new\ndigest << file_contents\nfile_name = Path[((name + \"-\") + digest.hexfinal) + \".json\"]\nFile.write(@js_output_path.join(file_name), file_contents)\n\"  <script type=\\\"importmap\\\" src=\\\"/#{file_name}\\\"></script>\\n  #{import_map.preload_module_links}\"\n"}},{"html_id":"render_import_map_tag(name:String=\"application\"):String-instance-method","name":"render_import_map_tag","doc":"Returns the named import map JSON as a rendered, non-minified, string.","summary":"<p>Returns the named import map JSON as a rendered, non-minified, string.</p>","abstract":false,"args":[{"name":"name","default_value":"\"application\"","external_name":"name","restriction":"String"}],"args_string":"(name : String = \"application\") : String","args_html":"(name : String = <span class=\"s\">&quot;application&quot;</span>) : String","location":{"filename":"src/asset_pipeline.cr","line_number":87,"url":null},"def":{"name":"render_import_map_tag","args":[{"name":"name","default_value":"\"application\"","external_name":"name","restriction":"String"}],"return_type":"String","visibility":"Public","body":"generate_file_version_hash(name)\n(get_import_map(name)).build_import_map_tag\n"}}]},{"html_id":"asset_pipeline/AssetPipeline/ImportMap","path":"AssetPipeline/ImportMap.html","kind":"class","full_name":"AssetPipeline::ImportMap","name":"ImportMap","abstract":false,"superclass":{"html_id":"asset_pipeline/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"asset_pipeline/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"asset_pipeline/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/import_map/import_map.cr","line_number":9,"url":null}],"repository_name":"asset_pipeline","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"asset_pipeline/AssetPipeline","kind":"module","full_name":"AssetPipeline","name":"AssetPipeline"},"doc":"The `ImportMap` is the main way that javascript is handled. This is a no-bundle approach using the \"import map\" browser standard.\n\nThe `ImportMap` supports several features that are provided by the import map specification:\n  - imports: this is a url that can be relative to your application, or a full CDN path to an esm module\n  - scopes: this is a feature that can help rescrict which librarys are loaded. The keys here are relative paths in your application.\n  - preloading: any import that's added with `preload: true` will also render a <link> tag to have the module preloaded\n","summary":"<p>The <code><a href=\"../AssetPipeline/ImportMap.html\">ImportMap</a></code> is the main way that javascript is handled.</p>","constructors":[{"html_id":"new(name:String=\"application\",public_asset_base_path:Path=Path[\"/\"])-class-method","name":"new","doc":"Set the name of the import map during initialization. The default is `application`\nSet the base path for your assets. This is used to make sure that relative paths are correct.\n\nFor example, if you're serving your javascript files from `/assets/js` then you would set `public_asset_bate_path` to `/assets/js`\n","summary":"<p>Set the name of the import map during initialization.</p>","abstract":false,"args":[{"name":"name","default_value":"\"application\"","external_name":"name","restriction":"::String"},{"name":"public_asset_base_path","default_value":"Path[\"/\"]","external_name":"public_asset_base_path","restriction":"Path"}],"args_string":"(name : String = \"application\", public_asset_base_path : Path = Path[\"/\"])","args_html":"(name : String = <span class=\"s\">&quot;application&quot;</span>, public_asset_base_path : Path = <span class=\"t\">Path</span>[<span class=\"s\">&quot;/&quot;</span>])","location":{"filename":"src/import_map/import_map.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"name","default_value":"\"application\"","external_name":"name","restriction":"::String"},{"name":"public_asset_base_path","default_value":"Path[\"/\"]","external_name":"public_asset_base_path","restriction":"Path"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, public_asset_base_path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_import(name:String,to:String,preload:Bool=false)-instance-method","name":"add_import","doc":"Name the library you want to incude in the import map.\n\n```\nimport(\"lodash\", \"https://cdn.jsdelivr.net/npm/lodash/lodash.min.js\")\n```\n\nAdding `preload` will mark the module to be eager loaded by the browser.\n```\nimport(\"lodash\", \"https://cdn.jsdelivr.net/npm/lodash/lodash.min.js\", preload: true)\n```\n\nThe `name` should match the way you import a class in your JS code.\n\nThe `to` parameter is the full path and name of file or the full CDN url to an ESM module.\n\nThink of it like this: you are importing the class `name` associated `to` a library file path.","summary":"<p>Name the library you want to incude in the import map.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"to","external_name":"to","restriction":"String"},{"name":"preload","default_value":"false","external_name":"preload","restriction":"Bool"}],"args_string":"(name : String, to : String, preload : Bool = false)","args_html":"(name : String, to : String, preload : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/import_map/import_map.cr","line_number":72,"url":null},"def":{"name":"add_import","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"to","external_name":"to","restriction":"String"},{"name":"preload","default_value":"false","external_name":"preload","restriction":"Bool"}],"visibility":"Public","body":"@imports << {name => to, \"preload\" => preload}"}},{"html_id":"add_scope(scope:String,name:String,to:String)-instance-method","name":"add_scope","doc":"Add a scope to your import map. Scopes are paths relative to your application.\n\nTo learn how to use scopes, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap\" target=\"_blank\">read about import maps and scopes here</a>","summary":"<p>Add a scope to your import map.</p>","abstract":false,"args":[{"name":"scope","external_name":"scope","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"to","external_name":"to","restriction":"String"}],"args_string":"(scope : String, name : String, to : String)","args_html":"(scope : String, name : String, to : String)","location":{"filename":"src/import_map/import_map.cr","line_number":79,"url":null},"def":{"name":"add_scope","args":[{"name":"scope","external_name":"scope","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"},{"name":"to","external_name":"to","restriction":"String"}],"visibility":"Public","body":"if scope.starts_with?(/\\/|\\.\\/|\\.\\.\\//)\nelse\n  raise(\"Scope key must start with `/`, `./`, or `../`\")\nend\n@scopes[scope] << {name => to}\n"}},{"html_id":"build_import_map_json:String-instance-method","name":"build_import_map_json","doc":"Generates the valid import json. This can be used in a .json file or a `<script type=\"importmap\">` tag.","summary":"<p>Generates the valid import json.</p>","abstract":false,"location":{"filename":"src/import_map/import_map.cr","line_number":38,"url":null},"def":{"name":"build_import_map_json","return_type":"String","visibility":"Public","body":"import_map_string = create_map_list_as_string\nimport_json = \"  { \\n    \\\"imports\\\": \\n    {\"\nimport_json = import_json + (import_map_string + \" }\")\nif @scopes.any?\n  import_json = import_json + ((\",\\n \\\"scopes\\\": {\" + create_scope_list_as_string) + \" }\")\nend\nimport_json = import_json + \"}\"\nimport_json\n"}},{"html_id":"build_import_map_tag:String-instance-method","name":"build_import_map_tag","doc":"This renders the complete HTML tag for the import map, including the modulepreload tags required.\n\nUse this method to render the full import map into an HTML view.","summary":"<p>This renders the complete HTML tag for the import map, including the modulepreload tags required.</p>","abstract":false,"location":{"filename":"src/import_map/import_map.cr","line_number":30,"url":null},"def":{"name":"build_import_map_tag","return_type":"String","visibility":"Public","body":"\"<script type=\\\"importmap\\\">#{build_import_map_json}</script>\\n#{@preload_module_links}\""}},{"html_id":"name:String-instance-method","name":"name","doc":"The name of your import map. Updatable with the `name=` method.","summary":"<p>The name of your import map.</p>","abstract":false,"location":{"filename":"src/import_map/import_map.cr","line_number":11,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"The name of your import map. Updatable with the `name=` method.","summary":"<p>The name of your import map.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/import_map/import_map.cr","line_number":11,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"}}]}]}]}})